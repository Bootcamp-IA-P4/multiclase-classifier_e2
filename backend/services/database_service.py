from db.database import supabase
from core.logging_config import setup_logger

logger = setup_logger(__name__)

def save_form_record(data: dict) -> dict:
    try:
        logger.info("üíæ Guardando formulario en base de datos Supabase...")
        response = supabase.table("patient_data").insert(data).execute()
        if response.error:
            logger.error(f"‚ùå Error al guardar formulario: {response.error}")
            raise Exception(str(response.error))
        logger.info("‚úÖ Formulario guardado exitosamente")
        return response.data
    except Exception as e:
        logger.exception("‚ùå Excepci√≥n al guardar formulario en BD")
        raise

def save_prediction_record(data: dict) -> dict:
    """Guarda una predicci√≥n en la tabla diabetes_predictions de Supabase."""
    try:
        logger.info("üíæ Guardando predicci√≥n en base de datos Supabase...")
        response = supabase.table("diabetes_predictions").insert(data).execute()
        if response.error:
            logger.error(f"‚ùå Error al guardar predicci√≥n: {response.error}")
            raise Exception(str(response.error))
        logger.info("‚úÖ Predicci√≥n guardada exitosamente")
        return response.data
    except Exception as e:
        logger.exception("‚ùå Excepci√≥n al guardar predicci√≥n en BD")
        raise

def get_all_forms() -> list:
    """Obtiene todos los formularios de la tabla patient_data."""
    try:
        logger.info("üìÑ Obteniendo todos los formularios de la base de datos Supabase...")
        response = supabase.table("patient_data").select("*").execute()
        if response.error:
            logger.error(f"‚ùå Error al obtener formularios: {response.error}")
            raise Exception(str(response.error))
        logger.info("‚úÖ Formularios obtenidos exitosamente")
        return response.data
    except Exception as e:
        logger.exception("‚ùå Excepci√≥n al obtener formularios en BD")
        raise